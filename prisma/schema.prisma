generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model professional {
  professional_id     Int                  @id @default(autoincrement())
  name                String               @db.VarChar(100)
  last_name           String               @db.VarChar(100)
  profile             String               @unique @db.VarChar(100)
  phone               String?              @db.VarChar(30)
  email               String?              @db.VarChar(255)
  password            String               @db.VarChar(255)
  gender              gender_options
  deleted_at          DateTime?            @db.Timestamp(6)
  created_at          DateTime             @default(now()) @db.Timestamp(6)
  updated_at          DateTime             @default(now()) @db.Timestamp(6)
  professional_detail professional_detail?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model professional_detail {
  detail_id     Int            @id @default(autoincrement())
  cuit          String?        @db.VarChar(20)
  fiscal_status fiscal_status?
  birthdate     DateTime?      @db.Date
  bank          String?        @db.VarChar(255)
  bank_account  String?        @db.VarChar(50)
  cbu           String?        @db.VarChar(23)
  alias         String?        @db.VarChar(50)
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  updated_at    DateTime       @default(now()) @db.Timestamp(6)
  professional  professional   @relation(fields: [detail_id], references: [professional_id], onDelete: NoAction, onUpdate: NoAction, map: "professional_fk")
}

enum fiscal_status {
  monotributista
  responsable_inscripto
}

enum gender_options {
  m
  f
  M
  F
  x
  X
}

enum user_types {
  client
  clientAdmin
}
